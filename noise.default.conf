## Configuration file for NOISE (http://disman.tl/noise.html)
## Last updated 17 August 2013 for version 0.4
##
## Lines that begin with '##' explain the configuration options.
## Lines that being with ';' are disabled options. You can
## enable them by removing the ';' at the beginning of the line.
##
## You can run each component with '-h' to see more help:
##   python noise.py -h
##   python noise_generate.py -h
##   python noise_dispatch.py -h
##   python noise_tweet.py -h

[Generate]
## NOISE generates new text based on a corpus of reference 
## text(s) provided by the user. You can either give a directory
## containing texts (corpus-dir), a single text (input-corpus),
## or a tokenized text file (input-tokens). At least one of
## these options must be enabled.
;corpus-dir = sources/
;input-corpus = sources/readingrainbow.txt
;input-tokens = tokens.gz

## You can optionally save a tokenized version of your input
## text(s), which can later be used as input for quicker text
## generation. The output-tokens option takes a filename, either
## absolute or relative to the current directory.
;output-tokens = tokens.gz

## A keywords file contains categorized groups of keywords. Each
## keyword category also has a relative weight that determines
## how often keywords from that category are chosen to replace
## proper nouns in the generated text.
## 
## So for example, let's say you have a keywords list of pop
## bands. If NOISE generated the sentence, "Barack Obama loves
## to read people's emails about the National Security Agency",
## it might turn into "Justin Beiber likes to read people's
## emails about the Backstreet Boys." It won't always make 
## sense, but it can be a fun MadLib!
##
## The keywords list should be generated using the
## noise-keyword-parser.py program. Read its documentation
## for usage instructions:
##   python noise-keyword-parser.py -h
##
## The targets-file option is a filename, and is optional.
;keywords-file = keywords.txt

## You can specify a maximum number of keywords to insert into
## the generated text with the max-keywords option. Over-using
## keywords causes the generated text to look strange. The default
## maximum number of keywords is 3. Optional.
;max-keywords = 3

## If you're generating short texts, you may also want to specify
## a minimum number of keyword replacements. By default,
## min-keywords is 0. Optional.
;min-keywords = 0

## The markov-length option determines how well the generated text
## resembles the original corpus text(s). The higher the number,
## the closer to the original. 2-3 is a good medium. Optional,
## default is 2.
;markov-length = 2

## The minimum number of words in generated sentences. Optional,
## defualt is 5.
;min-length = 5

## The number of generated sentences. Optional, defualt is 5.
;sentences = 5


[EmailDispatch]
## The 'From' field of the email. This also doubles as the username
## when logging into the email server. Required.
from = myemail@gmail.com

## One recipient will be chosen randomly from the list below for 
## each email. It is recommended that the domain of the sender
## (e.g. gmail.com) differ from the domain(s) of the recipient(s)
## (e.g. yahoo.com). Extra points for choosing email providers from
## different countries or continents. Recipients should be 
## separated by commas. Required.
to = foo@hotmail.com,bar@yahoo.com

## Mail server to use. Must have SSMTP (SMTP over SSL) enabled
## on port 465. Required.
server = smtp.gmail.com

## Passphrase for your account on the given mail server. Required.
pass = LoveSecretSexGod

## Subject line of the email to send. Required.
subject = Super important message!

## NOISE can be used with Tor or any SOCKS proxy. The proxy should
## be listening on localhost on the designated port. Warning: DNS
## lookups will NOT be sent over the proxy, which can reduce
## your anonymity.
##
## Probably a better option would be to run the program with
## torsocks, which does DNS lookups through Tor:
##   torsocks python noise.py -c noise.conf
;proxy = 9050

## Instead of sending text generated by noise_generate.py, you can
## send fake encrypted emails by setting the following option to
## 'true'.
;encrypted = true


[TwitterDispatch]
## Texts generated for the Twitter Dispatcher are ensured to be
## under 140 characters.

## The consumer_key and consumer_secret options are specific to
## the Twitter application you use to post to your account. The
## default ones below are for the 0xNOISE application, which
## you can use.
consumer-key = WEugY2JDnRkXb48Mf7sW1A
consumer-secret = YsVls7E3xi6qlnQ25RzhjFIdUyVZ00q3zksJ2lFHLw

## The oauth-token and oauth-secret options are created when you
## authorize your Twitter account to use the application. If you
## don't have these, they will be generated when you first run
## NOISE.
;oauth-token = 123456789-pWeDqr6t8N8XRXpIJnRwLRxaP16i14iGk5wOr5UC
;oauth-secret = bxAYTguTK6Plb5Cr9qaYg1zk6Dzx6gc0TUzhqUfflT

## The name of the application used to tweet on behalf of your
## Twitter account. This is only really needed if you don't have
## an oauth-token and oauth-secret, and need to generate them.
app-name = 0xNOISE

[General]
## NOISE dispatches emails periodically, but with some randomness
## thrown in to the schedule. The min-time and max-time options
## specify the time range (in minutes) in which each new email 
## will be scheduled for being sent. These options are required.
min-time = 30
max-time = 3600